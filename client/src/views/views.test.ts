import { History } from "./history"

test("empty history", async () => {
    const h = new History()
    expect(h.current).toBeUndefined()
    h.append(1)
    expect(h.current).toBe(1)
    h.back()
    expect(h.current).toBe(1)
})

test("append to history", async () => {
    const h = new History(1)
    expect(h.current).toBe(1)
    h.append(2)
    expect(h.current).toBe(2)
    h.append(3)
    expect(h.current).toBe(3)
})

test("move back and forward", async () => {
    const h = new History(1)
    h.append(2)
    h.append(3)
    expect(h.current).toBe(3)
    h.back()
    expect(h.current).toBe(2)
    h.back()
    expect(h.current).toBe(1)
    h.back()
    expect(h.current).toBe(1)
    h.forward()
    expect(h.current).toBe(2)
    h.forward()
    expect(h.current).toBe(3)
    h.forward()
    expect(h.current).toBe(3)
})

test("truncate", async () => {
    const h = new History(1)
    h.append(2)
    h.append(3)
    h.back()
    h.back()
    expect(h.current).toBe(1)
    h.append(5)
    expect(h.current).toBe(5)
    h.forward()
    expect(h.current).toBe(5)
    h.back()
    expect(h.current).toBe(1)
    h.back()
    expect(h.current).toBe(1)
    h.forward()
    expect(h.current).toBe(5)
    h.forward()
    expect(h.current).toBe(5)
})

test("next and previous", async () => {
    const h = new History()
    expect(h.hasPrevious).toBe(false)
    expect(h.hasNext).toBe(false)
    h.back()
    expect(h.hasPrevious).toBe(false)
    expect(h.hasNext).toBe(false)
    h.append(1)
    expect(h.hasPrevious).toBe(false)
    expect(h.hasNext).toBe(false)
    h.back()
    expect(h.hasPrevious).toBe(false)
    expect(h.hasNext).toBe(false)
    h.append(2)
    expect(h.hasPrevious).toBe(true)
    expect(h.hasNext).toBe(false)
    h.append(3)
    expect(h.hasPrevious).toBe(true)
    expect(h.hasNext).toBe(false)
    h.forward()
    expect(h.hasPrevious).toBe(true)
    expect(h.hasNext).toBe(false)
    h.back()
    expect(h.hasPrevious).toBe(true)
    expect(h.hasNext).toBe(true)
    h.back()
    expect(h.hasPrevious).toBe(false)
    expect(h.hasNext).toBe(true)
})